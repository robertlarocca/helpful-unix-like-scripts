#!/usr/bin/python3
# -*- coding=utf-8 -*-

# Copyright (c) 2024 Robert LaRocca <https://www.laroccx.com>

# This source code is governed by a MIT-style license that can be found
# in the included LICENSE file. If not, see <https://mit-license.org/>.

import argparse
import glob
import os
import shutil
import sys

# ----- Required global variables ----- #

SCRIPT_FILE = os.path.basename(__file__)
SCRIPT_NAME = str("clean")

SCRIPT_VERSION = str("1.0.6")
SCRIPT_RELEASE = str("devel")  # Options: devel, beta, release, stable

USER_HOME = os.path.expanduser("~")

# ----- Required global variables ----- #

parser = argparse.ArgumentParser(
    prog="clean",
    description="Remove the history files generated by popular command and shells.",
    add_help=True
)
parser.add_argument("-v", "--version", help="show version and exit", action="store_true")
parser.add_argument("-a", "--all", help="remove all history files", action="store_true")
parser.add_argument("-A", "--most", help="remove most history files (default)", action="store_true")
parser.add_argument("-d", "--redact", help="redact passwords", action="store_true")
parser.add_argument("-c", "--clear", help="clear screen", action="store_true")
parser.add_argument("-e", "--exit", help="exit shell", action="store_true")
parser.add_argument("-r", "--reboot", help="reboot host", action="store_true")
parser.add_argument("-s", "--shutdown", help="shutdown host", action="store_true")
parser.add_argument("-z", "--sleep", help="sleep host", action="store_true")
args = parser.parse_args()


def require_root_privileges():
    """require_root_privileges"""
    if os.name == "posix":
        if os.geteuid() != 0:
            print(f"Error: {SCRIPT_FILE} must be run as root!")
            sys.exit(2)


def require_user_privileges():
    """require_user_privileges"""
    if os.name == "posix":
        if os.geteuid() == 0:
            print(f"Error: {SCRIPT_FILE} must be run as normal user!")
            sys.exit(2)


def show_version():
    """show_version"""
    print(f"{SCRIPT_NAME} ({SCRIPT_FILE}) v{SCRIPT_VERSION}-{SCRIPT_RELEASE}")
    print("Copyright (c) 2024 Robert LaRocca, https://www.laroccx.com")
    print("License: The MIT License (MIT)")
    print("Source: https://github.com/robertlarocca/helpful-unix-like-scripts")
    sys.exit(0)


def remove_history():
    """remove_history"""
    if os.name == "posix":
        shutil.rmtree(os.path.join(USER_HOME, ".bash_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".bash_sessions"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".mysql_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".psql_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".python_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".rediscli_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".zsh_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".zsh_sessions"), ignore_errors=True)
    elif os.name == "nt":
        shutil.rmtree(
            os.path.join(
                    USER_HOME,
                    "AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine",
                    "ConsoleHost_history.txt"
                ), ignore_errors=True
            )

    clear_history()
    if args.clear:
        clear_screen()
    if args.exit:
        exit_shell()

    if args.sleep:
        sleep_host()
    elif args.reboot:
        reboot_host()
    elif args.shutdown:
        shutdown_host()


def remove_history_all():
    """remove_history_all"""
    if os.name == "posix":
        shutil.rmtree(os.path.join(USER_HOME, ".ansible"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".bash_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".bash_sessions"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".cache"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".lesshst"), ignore_errors=True)
        shutil.rmtree(
            os.path.join(
                    USER_HOME,
                    ".local/share/nano/search_history"
                ), ignore_errors=True
            )
        shutil.rmtree(os.path.join(USER_HOME, ".motd_shown"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".mysql_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".psql_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".python_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".rediscli_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".selected_editor"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".ssh/known_hosts.old"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".ssh/known_hosts"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".sudo_as_admin_successful"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".viminfo"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".wget-hsts"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".zsh_history"), ignore_errors=True)
        shutil.rmtree(os.path.join(USER_HOME, ".zsh_sessions"), ignore_errors=True)
    elif os.name == "nt":
        shutil.rmtree(
            os.path.join(
                    USER_HOME,
                    "AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine",
                    glob.glob("*.txt")
                ), ignore_errors=True
            )
        shutil.rmtree(
            os.path.join(
                    USER_HOME,
                    "AppData\\Roaming\\Microsoft\\Windows\\Recent",
                    glob.glob("*.lnk")
                ), ignore_errors=True
            )
        shutil.rmtree(
            os.path.join(
                    USER_HOME,
                    "AppData\\Roaming\\Microsoft\\Windows\\Recent\\AutomaticDestinations",
                    glob.glob("*")
                ), ignore_errors=True
            )
        shutil.rmtree(
            os.path.join(
                    USER_HOME,
                    "AppData\\Roaming\\Microsoft\\Windows\\Recent\\CustomDestinations",
                    glob.glob("*")
                ), ignore_errors=True
            )

    clear_history()
    if args.clear:
        clear_screen()
    if args.exit:
        exit_shell()

    if args.sleep:
        sleep_host()
    elif args.reboot:
        reboot_host()
    elif args.shutdown:
        shutdown_host()


def redact_passwords():
    """redact_passwords"""
    print("Cannot redact passwords in files yet!")
    sys.exit(1)


def clear_history():
    """clear_history"""
    if os.name == "posix":
        os.system("history -c 2> /dev/null")
        os.system("history -p 2> /dev/null")


def clear_screen():
    """clear_screen"""
    if os.name == "posix":
        os.system("clear 2> /dev/null")
    elif os.name == "nt":
        os.system("cls")


def reboot_host():
    """reboot_host"""
    if os.name == "posix":
        try:
            os.system("sudo shutdown -r +0 2> /dev/null")
        except Exception:
            sys.exit(1)
    elif os.name == "nt":
        try:
            os.system("shutdown.exe /r /t 0")
        except Exception:
            sys.exit(1)


def shutdown_host():
    """shutdown_host"""
    if os.name == "posix":
        try:
            os.system("sudo shutdown -h +0  2> /dev/null")
        except Exception:
            sys.exit(1)
    elif os.name == "nt":
        try:
            os.system("shutdown.exe /s /t 0")
        except Exception:
            sys.exit(1)


def sleep_host():
    """sleep_host"""
    if os.name == "posix":
        try:
            os.system("sudo shutdown -s +0  2> /dev/null")
        except Exception:
            sys.exit(1)
    elif os.name == "nt":
        try:
            os.system("shutdown.exe /h /t 0")
        except Exception:
            sys.exit(1)


def exit_shell():
    """exit_shell"""
    sys.exit(5)


def main():
    """main"""
    if args.version:
        show_version()
    elif args.all:
        remove_history_all()
    elif args.most:
        remove_history()
    elif args.redact:
        redact_passwords()
    else:
        remove_history()


if __name__ == "__main__":
    main()
    sys.exit(4)

# vi: syntax=python ts=4 sw=4 sts=4 sr noet
